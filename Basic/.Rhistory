tail(sales2)
mean(sales2)
mean(sales2, na.rm = TRUE)
# 이상치 처리
sales3 = c(albums$sales, 300000000000)
tail(sales3)
mean(sales3)
median(sales3)
# 분산, 표준편차
weight = c(64,68,70,72,78)
mean(weight)
var(weight)
sd(weight)
# 분산, 표준편차
weight = c(64,68,70,72,76)
mean(weight)
var(weight)
sd(weight)
w_mean = mean(weight)
w_dev = weight - mean(weight)
w_dev2 = w_dev ^2
mean(w_dev2)
var(weight)
sqrt(mean(w_dev2))
var(weight)
sd(weight)
# 주식 데이터
install.packages("tidyquant")
library(tidyquant)
library(quantmod)
library(purr)
library(ggplot2)
library(tibble)
tickers = c("AAPL","TSLA")
getSymbols(tickers, from="2022-01-02", to="2022-01-30")
install.package("purr")
install.packages("purr")
tickers = c("AAPL","TSLA")
getSymbols(tickers, from="2022-01-02", to="2022-01-30")
stock <- map(tickers, function(x) Ad(get(X)))
stock <- reduce(stock, merge)
colnames(stock) <- tickers
head(stock)
stock <- map(tickers, function(x) Ad(get(X)))
library(tidyquant)
library(quantmod)
library(purr)
library(ggplot2)
library(tibble)
install.packages("purr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
library(tidyquant)
library(quantmod)
library(purrr)
library(ggplot2)
library(tibble)
tickers = c("AAPL","TSLA")
getSymbols(tickers, from="2022-01-02", to="2022-01-30")
stock <- map(tickers, function(x) Ad(get(X)))
stock <- reduce(stock, merge)
colnames(stock) <- tickers
head(stock)
stock_df <- stock %>% data.frame(date=index(stock))
stock_df
stock <- map(tickers, function(x) Ad(get(x)))
stock <- reduce(stock, merge)
colnames(stock) <- tickers
head(stock)
stock_df <- stock %>% data.frame(date=index(stock))
stock_df
library(tidyquant)
library(quantmod)
library(purrr)
library(ggplot2)
library(tibble)
tickers = c("AAPL","TSLA")
getSymbols(tickers, from="2022-01-02", to="2022-01-30")
stock <- map(tickers, function(x) Ad(get(x)))
stock <- reduce(stock, merge)
colnames(stock) <- tickers
head(stock)
stock_df <- stock %>% data.frame(date=index(stock))
stock_df
cv_fun <- function(data){ # 사용자 정의 함수
result = sd(data)/mean(data)*100
return(result)
}
cv(stock_df)
cv_fun(stock_df)
cv_fun(stock_df$AAPL)
cv_fun(stock_df$TSLA)
Q
Q
Q
ggplot(stock_df, aes(x=date)) +
geom_line(aes(y=AAPL, colour="Apple")) +
teom_line(aes(y=TSLA, colour="Tesla")) +
scale_color_manual(name="Company", values=c("Apple"="red", "Tesla"="darkblue")) +
theme_bw()
ggplot(stock_df, aes(x=date)) +
geom_line(aes(y=AAPL, colour="Apple")) +
geom_line(aes(y=TSLA, colour="Tesla")) +
scale_color_manual(name="Company", values=c("Apple"="red", "Tesla"="darkblue")) +
theme_bw()
# 사분위수
quantile(albums$sales)
# 사분위수
qs_df <- quantile(albums$sales)
qs_df[4] - qs_df[2]
IQR(albums$sales)
box_plot(albums$sales)
boxplot(albums$sales)
sales2 <- c(albums$sales, 450, 460, -100, -1000)
q2 <- quantile(sales2)
q2
boxplot(q2)
boxplot(sales2)
bottom_outlier = q[2] - 1.5 * (q[4]-q[2])
top_outlier = q[4] + 1.5 * (q[4]-q[2])
bottom_outlier = q2[2] - 1.5 * (q2[4]-q2[2])
top_outlier = q2[4] + 1.5 * (q2[4]-q2[2])
sales2[sales2 < bottom_outlier | sales2 > top_outlier]
bottom = q2[2] - 1.5 * (q2[4] - q2[2]) # 상한: q1 - 1.5 * (q3-q1)
top = q2[4] + 1.5 * (q2[4] - q2[2]) # 하한: q3 + 1.5 * (q3-q1)
sales2[sales2 < bottom | sales2 > top]
z_value = (mean - data) / sd
# z-score
data = 120
mean = 125
sd = 15
N = 30
z_value = (mean - data) / sd
z_value
data = 120; mean = 125; sd = 15; N = 30
z_value = (mean - data) / sd
z_value
#--------------------------------#
mean_15 = 120
mean_20 = 125
sd_20   = 15
N       = 30
z_value = (125 - 120) / (15 / sqrt(N))
qt(0.025, df = N-1) # why 0.025? 양측검정이기 때문
# [1] -2.04523
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dt(x, df=N)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.38), main="", xlab="t", ylab="")
abline(h=0)
alpha <- 0.05
ul <- round(qt(1-(alpha/2), df=N), 2)
ll <- -ul
polygon(c(-3, x[x<ll], ll), c(0, y[x<ll], 0), col=2)
polygon(c(ul, x[x>ul], 3), c(0, y[x>ul], 0), col=2)
x <- seq(-3, 3, by=0.001)
y <- dt(x, df=N)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.38),
main="Z-분포", xlab="t", ylab="")
abline(h=0)
alpha <- 0.05
upper_lim <- round(qt(1-(alpha/2), df=N), 2)
lower_lim <- -upper_lim
polygon(c(-3, x[x<lower_lim], lower_lim), c(0, y[x<lower_lim], 0), col=2)
polygon(c(upper_lim, x[x>upper_lim], 3), c(0, y[x>upper_lim], 0), col=2)
arrows(z_value, 0.05, z_value, 0, length=0.1, col = "red")
text(z_value, 0.07, paste("t=", round(z_value, 3)))
x <- seq(-3, 3, by=0.001)
y <- dt(x, df=N)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.38),
main="", xlab="t", ylab="")
abline(h=0)
alpha <- 0.05
upper_lim <- round(qt(1-(alpha/2), df=N), 2)
lower_lim <- -upper_lim
polygon(c(-3, x[x<lower_lim], lower_lim), c(0, y[x<lower_lim], 0), col=2)
polygon(c(upper_lim, x[x>upper_lim], 3), c(0, y[x>upper_lim], 0), col=2)
arrows(z_value, 0.05, z_value, 0, length=0.1, col = "red")
text(z_value, 0.07, paste("t=", round(z_value, 3)))
text(lower_lim, -0.02, expression(-t[0.025]==-2.05))
text(upper_lim, -0.02, expression(t[0.025]==2.05))
pop_mean    = 150
sample_mean = 145
sd          = 7.5
N           = 10
set.seed(1234)
data = rnorm(N, mean = 145, sd = 7.5)
t_val = (sample_mean-pop_mean) / (sd / sqrt(N))
t_val
p.value <- pt(t_val, df=N-1) * 2
p.value
t.test(data, mu = 150)
pop_mean    = 150
sample_mean = 145
sd          = 7.5
N           = 10
t_val = (sample_mean - pop_mean) / (sd / sqrt(N))
t_val
p.value <- pt(t_val, df=N-1) * 2
p.value
set.seed(1234)
data = rnorm(N, mean = sample_mean, sd = pop_mean)
t.test(data, mu = 150)
N               = 200
defec_prod      = 22
pop_def_rate    = 0.1
sample_def_rate = 22 / 200
z = (sample_def_rate - pop_def_rate) / sqrt(pop_def_rate*(1 - pop_def_rate) / N)
alpha <- 0.05
(c.u <- qnorm(1-alpha) )
(p.value <- 1 - pnorm(z) )
# prop.test
prop.test(def_prod, N, p = 0.1, alternative = "greater", correct = FALSE)
N               = 200
def_prod      = 22
pop_rate    = 0.1
sample_rate = 22 / 200
z = (sample_rate - pop_rate) / sqrt(pop_rate*(1 - pop_rate) / N)
alpha <- 0.05
(c.u <- qnorm(1-alpha) )
(p.value <- 1 - pnorm(z) )
# prop.test
prop.test(def_prod, N, p = 0.1, alternative = "greater", correct = FALSE)
?prop.test
# 쥐 실험 몸무게 데이터 샘플
data <- read.csv("paired_t_test.csv")
print(data)
setwd("C:/Users/SAMSUNG/Desktop/Jiwon/R/solution/data")
setwd("C:/Users/SAMSUNG/Desktop/Jiwon/R/R_edu/source_2021/2_day_stat_regression/data")
# 쥐 실험 몸무게 데이터 샘플
data <- read.csv("paired_t_test.csv")
print(data)
setwd("C:/Users/SAMSUNG/Desktop/Jiwon/R/R_edu/source_2021/2_day_stat_regression/source")
# 쥐 실험 몸무게 데이터 샘플
data <- read.csv("paired_t_test.csv")
print(data)
library(dplyr)
library(reshape2)
library(ggplot2)
data2 = melt(data,
measure.vars = c("Prior", "Post"),
variable.name = "group",
value.name= "weight")
str(data2)
data2
?melt
str(data)
# 평균 및 표준편차 구하기
data2 %>%
group_by(group) %>%
summarise(count = n(), mean = mean(weight), sd = sd(weight))
ggplot(data2, aes(x = group, y = weight)) +
geom_boxplot()
data3 <- data %>%
mutate(differences = Prior - Post)
shapiro.test(data3$differences)
# 귀무가설: 00치료법은 쥐 몸무게 변화에 영향이 없다
# 대립가설: 00치료법은 쥐 몸무게 변화에 영향을 준다
t.test(data$Prior, data$Post, paired = TRUE, alternative = "two.sided")
women_height <- c(138.9, 161.7, 172.3, 120.8, 165.4,
163.6, 147.4, 147.8, 148.3)
men_height <- c(167.2, 160.5, 166.4, 176, 189.3,
173.2, 167.1, 161.3, 162.4)
data <- data.frame(
group = rep(c("Woman", "Man"), each = 9),
height = c(women_height,  men_height)
)
data
data %>%
group_by(group) %>%
summarise(count = n(), mean  = mean(height), sd = sd(height))
ggplot(data, aes(x = group, y = height)) +
geom_boxplot()
# 정규성 검정
shapiro.test(data[data$group == "Man", ]$height) # p = 0.09
shapiro.test(data[data$group == "Woman", ]$height) # p = 0.5347
# 등분산성 검정(귀무가설: 두개 그룹의 분산은 서로 같다.)
var.test(height ~ group, data = data) # p-value = 0.1382 (H0 채택)
# T.test (귀무가설: 남녀의 평균 키는 서로 같다.)
t.test(data$height ~ data$group,
mu = 0,
alternative = "two.sided",
var.equal = TRUE)
# 분산분석
library(dplyr)
library(ggplot2)
# 데이터 수집 및 가공
my_data = PlantGrowth
my_data
str(my_data)
my_data$group <- ordered(my_data$group, levels=c("ctrl", "trt1", "trt2"))
my_data %>%
group_by(group) %>%
summarise(count=n(), avg=mean(weight, na.rm=TRUE), sd=sd(weight, na.rm=TRUE))
my_data %>%
group_by(group) %>%
summarise(cnt=n(), avg=mean(weight, na.rm=TRUE), sd=sd(weight, na.rm=TRUE))
# 데이터 시각화
ggplot(my_data, aes(x=group, y=weight)) +
geom_boxplot()
ctrl <- my_data$weight[my_data$group=="ctrl"]
trt1 <- my_data$weight[my_data$group=="trt1"]
trt2 <- my_data$weight[my_data$group=="trt2"]
ctrl_m = mean(ctrl)
trt1_m = mean(trt1)
trt2_m = mean(trt2)
ctrl_sse = sum((ctrl-ctrl_m)^2)
trt1_sse = sum((trt1-trt1_m)^2)
trt2_sse = sum((trt2-trt2_m)^2)
sse = ctrl_sse + trt1_sse + trt2_sse
sse
df_e <- (length(ctrl)-1) + (length(trt1)-1) + (length(trt2)-1)
df_2
df_e
mse <- sse / df_e
mse
# SSTr, MST
tot_m = mean(my_data$weight)
ctrl_sst = length(ctrl)*sum((ctrl_m - tot_m)^2)
trt1_sst = length(trt1)*sum((trt1_m - tot_m)^2)
trt2_sst = length(trt2)*sum((trt2_m - tot_m)^2)
sst = ctrl_sst + trt1_sst + trt2_sst
df_t = length(levels(my_data$group)) - 1
df_5
df_t
mst = sst / df_t
mst
ss==tsq
tsq = sum((my_data$weight - tot_m)^2)
ss = sst + sse
ss==tsq
all.equal(tsq, ss)
tsq=ss
tsq = sum((my_data$weight - tot_m)^2)
ss = sst + sse
all.equal(tsq, ss)
tsq==ss
?all.equal
# F 통계량
f = mst / mse
ㄹ
f
df_e
df_t
alpha = 0.5
tol <- qf(1-alpha, df_t, df_e)
tol
p.value = 1-pf(f, df_t, df_e)
p.value
res.aov <- aov(data=my_data, weight~group)
summary(res.aov)
?qf
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), colour="blue", size=1)
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=df_t, df2=df_2), colour="skyblue")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=df_t, df2=df_e), colour="skyblue")
?geom_line
ggplot(data=my_data, aes(x=x)) +
geom_line()
ggplot(data=my_data, aes(x=weight)) +
geom_line()
?df
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), colour="purple", size=1) +
ggtitle("F Distribution of (df1=5, df2=10)")
?stat_function
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
geom_function(fun=df, args=list(df1=5, df2=10), colour="purple", size=1) +
ggtitle("F Distribution of (df1=5, df2=10)")
base <-
ggplot() +
xlim(-5, 5)
base + geom_function(fun = dnorm)
base + geom_function(fun = dnorm, args = list(mean = 2, sd = .5))
ggplot() +
geom_function(fun=df, args=list(df1=5, df2=10), colour="purple", size=1) +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), geom="line", colour="purple", size=1) +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), geom="point", colour="purple", size=1) +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun=df, args=list(df1=5, df2=10), geom="point") +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=5, df2=10), geom="point") +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=5, df2=10), geom="line") +
ggtitle("F Distribution of (df1=5, df2=10)")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution")
?arrows
arrows(f, 0.05, f, 0, length=0.1, col = "red")
text(f, 0.07, paste("f=", round(f, 3)))
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution")
arrows(f, 0.05, f, 0, length=0.1, col = "red")
text(f, 0.07, paste("f=", round(f, 3)))
d
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
arrows(f, 0.05, f, 0, length=0.1, col = "red") +
text(f, 0.07, paste("f=", round(f, 3)))
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution")
arrows(f, 0.05, f, 0, length=0.1, col = "red")
text(f, 0.07, paste("f=", round(f, 3)))
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(f, colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=x, y=f), colour="red")
f
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f, y=y), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=x, y=f), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f, y=f), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f, y=0), colour="red")
?Df
?df
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f, y=df(f)), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
ggtitle("F Distribution") +
geom_point(aes(x=f, y=df(f, df1=df_t, df2=df_e)), colour="red")
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
geom_point(aes(x=f, y=df(f, df1=df_t, df2=df_e)), colour="red") +
ggtitle("F Distribution") +
ylab("density")
# F-분포 그래프
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
geom_point(aes(x=f, y=df(f, df1=df_t, df2=df_e)), colour="red", size=3) +
ggtitle("F Distribution") +
ylab("density")
# F-분포 그래프
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
geom_point(aes(x=f, y=df(f, df1=df_t, df2=df_e)), colour="red", size=2) +
ggtitle("F Distribution") +
ylab("density")
# F-분포 그래프
ggplot(data.frame(x=c(0,5)), aes(x=x)) +
stat_function(fun="df", args=list(df1=df_t, df2=df_e), geom="line") +
geom_point(aes(x=f, y=df(f, df1=df_t, df2=df_e)), colour="red", size=2) +
geom_point(aes(x=p.value, y=0), colour="blue", size=2) +
ggtitle("F Distribution") +
ylab("density")
p.value
diamonds <- ggplot2::diamonds
str(diamonds)
str(diamonds$carat)
summary(diamonds$carat)
diamonds$carat_grade1 <- cut(diamonds$carat, breaks=3,
labels=c("small","middle","big"))
table(diamonds$carat_grade1)
summary(diamonds$carat)
# 2
diamonds$carat_grade2 <- cut(diamonds$carat, breaks=c(0, 1, 6),
labels=c("small","big"))
table(diamonds$carat_grade2)
# 3
diamonds %>%
group_by(carat_grade2) %>%
summarise(cnt=n(), avg=mean(price))
# 3
diamonds %>%
group_by(carat_grade2) %>%
summarise(cnt=n(), avg=mean(price)) %>%
mutate(total1=sum(cnt), total2=sum(avg),
pct1=round(cnt/sum(cnt)*100,1), pct2=rounc(avg/sum(avg)*100,1)) %>%
select(carat_grade2, cnt, avg, pct1, pct2)
# 3
diamonds %>%
group_by(carat_grade2) %>%
summarise(cnt=n(), avg=mean(price)) %>%
mutate(total1=sum(cnt), total2=sum(avg),
pct1=round(cnt/sum(cnt)*100,1), pct2=round(avg/sum(avg)*100,1)) %>%
select(carat_grade2, cnt, avg, pct1, pct2)
getwd()
